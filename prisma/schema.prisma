generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SysConfig {
  id          Int        @id @default(autoincrement())
  description String?
  createdTime DateTime   @default(now()) @map("created_time")
  updatedTime DateTime   @updatedAt @map("updated_time")
  category    String?    @default("SYSTEM")
  key         String     @unique(map: "sys_config_config_key_key")
  value       String?
  isPublic    Boolean    @default(false) @map("is_public")
  isSystem    Boolean    @default(false) @map("is_system")
  sortOrder   Int?       @default(0) @map("sort_order")
  type        ConfigType @default(STRING)
  name        String?

  @@map("sys_config")
}

model User {
  id              Int          @id @default(autoincrement())
  username        String       @unique
  name            String?
  phone           String?      @unique
  email           String?      @unique
  sex             Sex?         @default(OTHER)
  avatar          String?
  birthday        DateTime?
  createdTime     DateTime     @default(now()) @map("created_time")
  updatedTime     DateTime?    @updatedAt @map("updated_time")
  deletedTime     DateTime?    @map("deleted_time")
  password        String
  isDeleted       Boolean      @default(false) @map("is_deleted")
  status          Int          @default(0)
  roleType        String?      @default("user") @map("role_type")
  city            String?
  address         String?
  addressDetail   String?      @map("address_detail")
  noticesAuthored Notice[]     @relation("NoticeAuthor")
  Todo            Todo[]
  userNotice      UserNotice[]
  roles           UserRole[]

  @@map("user")
}

model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  code        String     @unique
  type        String
  pid         Int?
  path        String?
  redirect    String?
  icon        String?
  component   String?
  layout      String
  keepAlive   Boolean?   @default(false) @map("keep_alive")
  method      String?
  description String?
  show        Boolean    @default(true)
  enable      Boolean    @default(true)
  order       Int
  createdTime DateTime   @default(now()) @map("created_time")
  updatedTime DateTime?  @updatedAt @map("updated_time")
  needLogin   Boolean?   @default(true) @map("need_login")
  extraData   String?    @map("extra_data")
  roles       RoleMenu[]

  @@map("menu")
}

model Role {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  name        String     @unique
  description String?
  createdTime DateTime   @default(now()) @map("created_time")
  updatedTime DateTime   @updatedAt @map("updated_time")
  deletedTime DateTime?  @map("deleted_time")
  isDeleted   Boolean    @default(false) @map("is_deleted")
  menus       RoleMenu[]
  users       UserRole[]

  @@map("role")
}

model RoleMenu {
  id         Int      @id @default(autoincrement())
  roleId     Int      @map("role_id")
  menuId     Int      @map("menu_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId])
  @@index([menuId], map: "role_menu_menu_id_fkey")
  @@map("role_menu")
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roleId], map: "user_role_roleId_fkey")
  @@index([userId], map: "user_role_user_id_fkey")
  @@map("user_role")
}

model Notice {
  id          Int          @id @default(autoincrement())
  title       String
  content     String?
  type        NoticeType
  authorId    Int
  status      Int          @default(0)
  isDeleted   Boolean      @default(false) @map("is_deleted")
  createdTime DateTime     @default(now()) @map("created_time")
  updatedTime DateTime     @updatedAt @map("updated_time")
  deletedTime DateTime?    @map("deleted_time")
  author      User         @relation("NoticeAuthor", fields: [authorId], references: [id])
  receivers   UserNotice[]

  @@index([authorId], map: "notice_authorId_fkey")
  @@map("notice")
}

model UserNotice {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  noticeId     Int       @map("notice_id")
  assignedTime DateTime  @default(now()) @map("assigned_time")
  readTime     DateTime?
  isDeleted    Boolean   @default(false) @map("is_deleted")
  notice       Notice    @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, noticeId])
  @@index([noticeId], map: "user_notice_notice_id_fkey")
  @@map("user_notice")
}

model Todo {
  id          Int       @id @default(autoincrement())
  pid         Int?
  title       String
  content     String?
  sortOrder   Int?      @default(0) @map("sort_order")
  isDone      Boolean   @default(false)
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime? @updatedAt @map("updated_time")
  doneTime    DateTime? @map("done_time")
  userId      Int
  parent      Todo?     @relation("ParentChild", fields: [pid], references: [id])
  children    Todo[]    @relation("ParentChild")
  user        User      @relation(fields: [userId], references: [id])

  @@index([pid], map: "todo_pid_fkey")
  @@index([userId], map: "todo_userId_fkey")
  @@map("todo")
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
  FILE
  EMAIL
  URL
  PASSWORD
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum NoticeType {
  NOTICE
  INFO
  ACTIVITY
}
