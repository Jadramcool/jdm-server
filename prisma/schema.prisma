generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SysConfig {
  id          Int      @id @default(autoincrement())
  name        String
  value       Boolean
  description String?
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime @updatedAt @map("updated_time")

  @@map("sys_config")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  name        String?
  phone       String?   @unique
  email       String?   @unique
  sex         Sex?      @default(OTHER)
  birthday    DateTime?
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime? @updatedAt @map("updated_time")
  deletedTime DateTime? @map("deleted_time")
  password    String
  deleted     Boolean   @default(false)
  status      Int       @default(0) // 0: 未激活, 1: 激活

  roles UserRole[]

  @@map("user")
}

// 枚举
enum Sex {
  MALE
  FEMALE
  OTHER
}

// 菜单表
model Menu {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  type        String
  pid         Int?
  path        String
  redirect    String?
  icon        String
  component   String?
  layout      String
  keepAlive   Boolean? @default(false)
  method      String?
  description String?
  show        Boolean  @default(true)
  enable      Boolean  @default(true)
  order       Int

  // // 如果`pid`字段代表父菜单ID，则可以添加关联关系
  // parent Menu? @relation("MenuParent", fields: [pid], references: [id])

  // // 如果菜单下还有子菜单，也可以添加关联关系
  // children Menu[] @relation("MenuChildren")
  roles RoleMenu[] // 与角色菜单表的关系

  @@map("menu")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime @updatedAt @map("updated_time")

  users UserRole[]
  menus RoleMenu[]

  @@map("role")
}

model RoleMenu {
  id         Int      @id @default(autoincrement())
  roleId     Int      @map("role_id")
  role       Role     @relation(fields: [roleId], references: [id])
  menuId     Int      @map("menu_id")
  menu       Menu     @relation(fields: [menuId], references: [id])
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@index([menuId], map: "role_menu_menuId_fkey")
  @@map("role_menu")
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  roleId     Int      @map("role_id")
  role       Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@index([roleId], map: "user_role_roleId_fkey")
  @@map("user_role")
}
