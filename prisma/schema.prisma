// Prisma客户端生成器配置
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"] // 启用关系连接预览功能
}

// 数据源配置
datasource db {
  provider = "mysql" // 使用MySQL数据库
  url      = env("DATABASE_URL") // 从环境变量获取数据库连接URL
}

/**
 * 系统配置表
 * 用于存储系统级别的配置信息，支持多种数据类型
 */
model SysConfig {
  id          Int        @id @default(autoincrement()) // 主键，自增ID
  description String? // 配置描述
  createdTime DateTime   @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime   @updatedAt @map("updated_time") // 更新时间
  category    String?    @default("SYSTEM") // 配置分类，默认为SYSTEM
  key         String     @unique(map: "sys_config_config_key_key") // 配置键，唯一
  value       String? // 配置值
  isPublic    Boolean    @default(false) @map("is_public") // 是否公开配置
  isSystem    Boolean    @default(false) @map("is_system") // 是否系统配置
  sortOrder   Int?       @default(0) @map("sort_order") // 排序顺序
  type        ConfigType @default(STRING) // 配置类型
  name        String? // 配置名称

  @@map("sys_config")
}

/**
 * 用户表
 * 存储系统用户的基本信息和关联关系
 */
model User {
  id            Int       @id @default(autoincrement()) // 主键，自增ID
  username      String    @unique // 用户名，唯一
  name          String? // 真实姓名
  phone         String?   @unique // 手机号，唯一
  email         String?   @unique // 邮箱，唯一
  sex           Sex?      @default(OTHER) // 性别，默认为其他
  avatar        String? // 头像URL
  birthday      DateTime? // 生日
  createdTime   DateTime  @default(now()) @map("created_time") // 创建时间
  updatedTime   DateTime? @updatedAt @map("updated_time") // 更新时间
  deletedTime   DateTime? @map("deleted_time") // 删除时间
  password      String // 密码
  isDeleted     Boolean   @default(false) @map("is_deleted") // 是否已删除
  status        Int       @default(0) // 用户状态 0-禁用 1-启用
  roleType      String?   @default("user") @map("role_type") // 角色类型
  city          String? // 城市
  address       String? // 地址
  addressDetail String?   @map("address_detail") // 详细地址
  departmentId  Int?      @map("department_id") // 所属部门ID
  joinedAt      DateTime? @map("joined_at") // 入职时间
  position      String? // 职位

  // 关联关系
  managedDepts    Department[]   @relation("DepartmentManager") // 管理的部门
  noticesAuthored Notice[]       @relation("NoticeAuthor") // 发布的通知
  operationLogs   OperationLog[] // 操作日志
  Todo            Todo[] // 待办事项
  department      Department?    @relation("UserDepartment", fields: [departmentId], references: [id]) // 所属部门
  userNotice      UserNotice[] // 用户通知关联
  roles           UserRole[] // 用户角色关联

  @@index([departmentId], map: "user_department_id_fkey")
  @@map("user")
}

/**
 * 菜单表
 * 存储系统菜单和权限信息
 */
model Menu {
  id          Int       @id @default(autoincrement()) // 主键，自增ID
  name        String // 菜单名称
  code        String    @unique // 菜单编码，唯一
  type        String // 菜单类型
  pid         Int? // 父菜单ID
  path        String? // 路由路径
  redirect    String? // 重定向路径
  icon        String? // 图标
  component   String? // 组件路径
  layout      String // 布局类型
  keepAlive   Boolean?  @default(false) @map("keep_alive") // 是否缓存页面
  method      String? // HTTP方法
  description String? // 描述
  show        Boolean   @default(true) // 是否显示
  enable      Boolean   @default(true) // 是否启用
  order       Int // 排序
  createdTime DateTime  @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime? @updatedAt @map("updated_time") // 更新时间
  needLogin   Boolean?  @default(true) @map("need_login") // 是否需要登录
  extraData   String?   @map("extra_data") // 额外数据

  // 关联关系
  roles RoleMenu[] // 角色菜单关联

  @@map("menu")
}

/**
 * 角色表
 * 存储系统角色信息
 */
model Role {
  id          Int       @id @default(autoincrement()) // 主键，自增ID
  code        String    @unique // 角色编码，唯一
  name        String    @unique // 角色名称，唯一
  description String? // 角色描述
  createdTime DateTime  @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime  @updatedAt @map("updated_time") // 更新时间
  deletedTime DateTime? @map("deleted_time") // 删除时间
  isDeleted   Boolean   @default(false) @map("is_deleted") // 是否已删除

  // 关联关系
  departments RoleDepartment[] @relation("RoleDepartments") // 角色部门关联
  menus       RoleMenu[] // 角色菜单关联
  users       UserRole[] // 用户角色关联

  @@map("role")
}

/**
 * 角色菜单关联表
 * 定义角色与菜单的多对多关系
 */
model RoleMenu {
  id         Int      @id @default(autoincrement()) // 主键，自增ID
  roleId     Int      @map("role_id") // 角色ID
  menuId     Int      @map("menu_id") // 菜单ID
  assignedAt DateTime @default(now()) @map("assigned_at") // 分配时间

  // 关联关系
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade) // 关联菜单
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade) // 关联角色

  @@unique([roleId, menuId]) // 角色和菜单的组合唯一
  @@index([menuId], map: "role_menu_menu_id_fkey")
  @@map("role_menu")
}

/**
 * 用户角色关联表
 * 定义用户与角色的多对多关系
 */
model UserRole {
  id         Int      @id @default(autoincrement()) // 主键，自增ID
  userId     Int      @map("user_id") // 用户ID
  roleId     Int      @map("role_id") // 角色ID
  assignedAt DateTime @default(now()) @map("assigned_at") // 分配时间

  // 关联关系
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade) // 关联角色
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // 关联用户

  @@index([roleId], map: "user_role_roleId_fkey")
  @@index([userId], map: "user_role_user_id_fkey")
  @@map("user_role")
}

/**
 * 通知表
 * 存储系统通知信息
 */
model Notice {
  id          Int        @id @default(autoincrement()) // 主键，自增ID
  title       String // 通知标题
  content     String? // 通知内容
  type        NoticeType // 通知类型
  authorId    Int // 作者ID
  status      Int        @default(0) // 通知状态 0-草稿 1-发布
  isDeleted   Boolean    @default(false) @map("is_deleted") // 是否已删除
  createdTime DateTime   @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime   @updatedAt @map("updated_time") // 更新时间
  deletedTime DateTime?  @map("deleted_time") // 删除时间

  // 关联关系
  author    User         @relation("NoticeAuthor", fields: [authorId], references: [id]) // 通知作者
  receivers UserNotice[] // 通知接收者

  @@index([authorId], map: "notice_authorId_fkey")
  @@map("notice")
}

/**
 * 用户通知关联表
 * 定义用户与通知的关系，记录阅读状态
 */
model UserNotice {
  id           Int       @id @default(autoincrement()) // 主键，自增ID
  userId       Int       @map("user_id") // 用户ID
  noticeId     Int       @map("notice_id") // 通知ID
  assignedTime DateTime  @default(now()) @map("assigned_time") // 分配时间
  readTime     DateTime? // 阅读时间
  isDeleted    Boolean   @default(false) @map("is_deleted") // 是否已删除

  // 关联关系
  notice Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade) // 关联通知
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // 关联用户

  @@unique([userId, noticeId]) // 用户和通知的组合唯一
  @@index([noticeId], map: "user_notice_notice_id_fkey")
  @@map("user_notice")
}

/**
 * 待办事项表
 * 存储用户的待办任务，支持层级结构
 */
model Todo {
  id          Int       @id @default(autoincrement()) // 主键，自增ID
  pid         Int? // 父待办事项ID
  title       String // 待办标题
  content     String? // 待办内容
  sortOrder   Int?      @default(0) @map("sort_order") // 排序顺序
  isDone      Boolean   @default(false) // 是否完成
  createdTime DateTime  @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime? @updatedAt @map("updated_time") // 更新时间
  doneTime    DateTime? @map("done_time") // 完成时间
  userId      Int // 用户ID

  // 关联关系
  parent   Todo?  @relation("ParentChild", fields: [pid], references: [id]) // 父待办事项
  children Todo[] @relation("ParentChild") // 子待办事项
  user     User   @relation(fields: [userId], references: [id]) // 关联用户

  @@index([pid], map: "todo_pid_fkey")
  @@index([userId], map: "todo_userId_fkey")
  @@map("todo")
}

/**
 * 部门表
 * 存储组织架构信息，支持层级结构
 */
model Department {
  id          Int       @id @default(autoincrement()) // 主键，自增ID
  name        String // 部门名称
  code        String    @unique // 部门编码，唯一
  description String? // 部门描述
  level       Int       @default(1) // 部门层级
  sortOrder   Int       @default(0) @map("sort_order") // 排序顺序
  status      Int       @default(0) // 部门状态 0-禁用 1-启用
  managerId   Int?      @map("manager_id") // 部门经理ID
  isDeleted   Boolean   @default(false) @map("is_deleted") // 是否已删除
  createdTime DateTime  @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime  @updatedAt @map("updated_time") // 更新时间
  deletedTime DateTime? @map("deleted_time") // 删除时间
  parentId    Int?      @map("parent_id") // 父部门ID

  // 关联关系
  manager  User?            @relation("DepartmentManager", fields: [managerId], references: [id]) // 部门经理
  parent   Department?      @relation("DepartmentHierarchy", fields: [parentId], references: [id]) // 父部门
  children Department[]     @relation("DepartmentHierarchy") // 子部门
  roles    RoleDepartment[] @relation("DepartmentRoles") // 部门角色关联
  users    User[]           @relation("UserDepartment") // 部门用户

  @@index([parentId], map: "department_parent_id_fkey")
  @@index([managerId], map: "department_manager_id_fkey")
  @@index([code]) // 部门编码索引
  @@index([status]) // 部门状态索引
  @@map("department")
}

/**
 * 角色部门关联表
 * 定义角色与部门的多对多关系，支持自动分配
 */
model RoleDepartment {
  id              Int      @id @default(autoincrement()) // 主键，自增ID
  roleId          Int      @map("role_id") // 角色ID
  departmentId    Int      @map("department_id") // 部门ID
  autoAssign      Boolean  @default(false) @map("auto_assign") // 是否自动分配
  defaultPosition String?  @map("default_position") // 默认职位
  assignedAt      DateTime @default(now()) @map("assigned_at") // 分配时间

  // 关联关系
  department Department @relation("DepartmentRoles", fields: [departmentId], references: [id], onDelete: Cascade) // 关联部门
  role       Role       @relation("RoleDepartments", fields: [roleId], references: [id], onDelete: Cascade) // 关联角色

  @@unique([roleId, departmentId]) // 角色和部门的组合唯一
  @@index([roleId], map: "role_department_role_id_fkey")
  @@index([departmentId], map: "role_department_department_id_fkey")
  @@index([autoAssign]) // 自动分配索引
  @@map("role_department")
}

/**
 * 操作日志表
 * 记录用户的操作行为，用于审计和追踪
 */
model OperationLog {
  id            Int             @id @default(autoincrement()) // 主键，自增ID
  userId        Int?            @map("user_id") // 用户ID
  username      String? // 用户名
  operationType OperationType   @map("operation_type") // 操作类型
  module        String? // 操作模块
  description   String? // 操作描述
  method        String? // HTTP方法
  url           String? // 请求URL
  params        String?         @db.Text // 请求参数
  result        String?         @db.Text // 操作结果
  status        OperationStatus @default(SUCCESS) // 操作状态
  errorMessage  String?         @map("error_message") @db.Text // 错误信息
  ipAddress     String?         @map("ip_address") // IP地址
  userAgent     String?         @map("user_agent") @db.Text // 用户代理
  duration      Int? // 执行时长(毫秒)
  createdTime   DateTime        @default(now()) @map("created_time") // 创建时间

  // 关联关系
  user User? @relation(fields: [userId], references: [id]) // 关联用户

  @@index([userId], map: "operation_log_user_id_fkey")
  @@index([operationType]) // 操作类型索引
  @@index([createdTime]) // 创建时间索引
  @@index([status]) // 操作状态索引
  @@map("operation_log")
}

model Navigation {
  id          Int                         @id @default(autoincrement()) // 主键，自增ID
  name        String? // 导航名称
  path        String? // 导航路径
  icon        String? // 导航图标
  description String? // 导航描述
  sortOrder   Int?                        @default(0) @map("sort_order") // 排序顺序
  status      Int?                        @default(0) // 导航状态 0-禁用 1-启用
  isDeleted   Boolean?                    @default(false) @map("is_deleted") // 是否已删除
  createdTime DateTime?                   @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime?                   @updatedAt @map("updated_time") // 更新时间
  deletedTime DateTime?                   @map("deleted_time") // 删除时间
  groups      NavigationGroupNavigation[] // 导航与导航组的多对多关联

  @@map("navigation")
}

model NavigationGroup {
  id          Int                         @id @default(autoincrement()) // 主键，自增ID
  name        String // 导航组名称
  icon        String? // 导航组图标
  description String? // 导航组描述
  sortOrder   Int?                        @default(0) @map("sort_order") // 排序顺序
  status      Int?                        @default(0) // 导航组状态 0-禁用 1-启用
  isDeleted   Boolean?                    @default(false) @map("is_deleted") // 是否已删除
  createdTime DateTime?                   @default(now()) @map("created_time") // 创建时间
  updatedTime DateTime?                   @updatedAt @map("updated_time") // 更新时间
  deletedTime DateTime?                   @map("deleted_time") // 删除时间
  navigations NavigationGroupNavigation[] // 导航组与导航的多对多关联

  @@map("navigation_group")
}

// 导航与导航组的多对多关联表
model NavigationGroupNavigation {
  id           Int             @id @default(autoincrement()) // 主键，自增ID
  navigationId Int             @map("navigation_id") // 导航ID
  groupId      Int             @map("group_id") // 导航组ID
  sortOrder    Int?            @default(0) @map("sort_order") // 在该组内的排序顺序
  createdTime  DateTime?       @default(now()) @map("created_time") // 创建时间
  updatedTime  DateTime?       @updatedAt @map("updated_time") // 更新时间
  navigation   Navigation      @relation(fields: [navigationId], references: [id], onDelete: Cascade) // 导航关联
  group        NavigationGroup @relation(fields: [groupId], references: [id], onDelete: Cascade) // 导航组关联

  @@unique([navigationId, groupId]) // 确保同一个导航在同一个组中只能存在一次
  @@map("navigation_group_navigation")
}

// 枚举定义

/**
 * 配置类型枚举
 * 定义系统配置支持的数据类型
 */
enum ConfigType {
  STRING // 字符串类型
  NUMBER // 数字类型
  BOOLEAN // 布尔类型
  JSON // JSON对象类型
  ARRAY // 数组类型
  FILE // 文件类型
  EMAIL // 邮箱类型
  URL // URL类型
  PASSWORD // 密码类型
}

/**
 * 性别枚举
 */
enum Sex {
  MALE // 男性
  FEMALE // 女性
  OTHER // 其他
}

/**
 * 通知类型枚举
 */
enum NoticeType {
  NOTICE // 通知
  INFO // 信息
  ACTIVITY // 活动
}

/**
 * 操作类型枚举
 * 定义系统支持的操作类型
 */
enum OperationType {
  CREATE // 创建
  UPDATE // 更新
  DELETE // 删除
  VIEW // 查看
  LOGIN // 登录
  LOGOUT // 登出
  EXPORT // 导出
  IMPORT // 导入
  OTHER // 其他
}

/**
 * 操作状态枚举
 * 定义操作执行的状态
 */
enum OperationStatus {
  SUCCESS // 成功
  FAILED // 失败
  PENDING // 待处理
}
