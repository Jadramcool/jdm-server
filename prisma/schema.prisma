generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SysConfig {
  id          Int        @id @default(autoincrement())
  description String?
  createdTime DateTime   @default(now()) @map("created_time")
  updatedTime DateTime   @updatedAt @map("updated_time")
  category    String?    @default("SYSTEM")
  key         String     @unique(map: "sys_config_config_key_key")
  value       String?
  isPublic    Boolean    @default(false) @map("is_public")
  isSystem    Boolean    @default(false) @map("is_system")
  sortOrder   Int?       @default(0) @map("sort_order")
  type        ConfigType @default(STRING)
  name        String?

  @@map("sys_config")
}

model User {
  id              Int            @id @default(autoincrement())
  username        String         @unique
  name            String?
  phone           String?        @unique
  email           String?        @unique
  sex             Sex?           @default(OTHER)
  avatar          String?
  birthday        DateTime?
  createdTime     DateTime       @default(now()) @map("created_time")
  updatedTime     DateTime?      @updatedAt @map("updated_time")
  deletedTime     DateTime?      @map("deleted_time")
  password        String
  isDeleted       Boolean        @default(false) @map("is_deleted")
  status          Int            @default(0)
  roleType        String?        @default("user") @map("role_type")
  city            String?
  address         String?
  addressDetail   String?        @map("address_detail")
  departmentId    Int?           @map("department_id")
  joinedAt        DateTime?      @map("joined_at")
  position        String?
  managedDepts    Department[]   @relation("DepartmentManager")
  noticesAuthored Notice[]       @relation("NoticeAuthor")
  operationLogs   OperationLog[]
  Todo            Todo[]
  department      Department?    @relation("UserDepartment", fields: [departmentId], references: [id])
  userNotice      UserNotice[]
  isBlogUser Boolean @default(false) @map("is_blog_user") // 是否是博客用户

  roles           UserRole[]

  // 博客相关关系
  blogPosts        BlogPost[] // 用户发布的博客文章
  blogComments     BlogComment[] // 用户发表的评论
  blogPostLikes    BlogPostLike[] // 用户的文章点赞
  blogCommentLikes BlogCommentLike[] // 用户的评论点赞

  @@index([departmentId], map: "user_department_id_fkey")
  @@map("user")
}

model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  code        String     @unique
  type        String
  pid         Int?
  path        String?
  redirect    String?
  icon        String?
  component   String?
  layout      String
  keepAlive   Boolean?   @default(false) @map("keep_alive")
  method      String?
  description String?
  show        Boolean    @default(true)
  enable      Boolean    @default(true)
  order       Int
  createdTime DateTime   @default(now()) @map("created_time")
  updatedTime DateTime?  @updatedAt @map("updated_time")
  needLogin   Boolean?   @default(true) @map("need_login")
  extraData   String?    @map("extra_data")
  roles       RoleMenu[]

  @@map("menu")
}

model Role {
  id          Int              @id @default(autoincrement())
  code        String           @unique
  name        String           @unique
  description String?
  createdTime DateTime         @default(now()) @map("created_time")
  updatedTime DateTime         @updatedAt @map("updated_time")
  deletedTime DateTime?        @map("deleted_time")
  isDeleted   Boolean          @default(false) @map("is_deleted")
  departments RoleDepartment[] @relation("RoleDepartments")
  menus       RoleMenu[]
  users       UserRole[]

  @@map("role")
}

model RoleMenu {
  id         Int      @id @default(autoincrement())
  roleId     Int      @map("role_id")
  menuId     Int      @map("menu_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId])
  @@index([menuId], map: "role_menu_menu_id_fkey")
  @@map("role_menu")
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roleId], map: "user_role_roleId_fkey")
  @@index([userId], map: "user_role_user_id_fkey")
  @@map("user_role")
}

model Notice {
  id          Int          @id @default(autoincrement())
  title       String
  content     String?
  type        NoticeType
  authorId    Int
  status      Int          @default(0)
  isDeleted   Boolean      @default(false) @map("is_deleted")
  createdTime DateTime     @default(now()) @map("created_time")
  updatedTime DateTime     @updatedAt @map("updated_time")
  deletedTime DateTime?    @map("deleted_time")
  author      User         @relation("NoticeAuthor", fields: [authorId], references: [id])
  receivers   UserNotice[]

  @@index([authorId], map: "notice_authorId_fkey")
  @@map("notice")
}

model UserNotice {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  noticeId     Int       @map("notice_id")
  assignedTime DateTime  @default(now()) @map("assigned_time")
  readTime     DateTime?
  isDeleted    Boolean   @default(false) @map("is_deleted")
  notice       Notice    @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, noticeId])
  @@index([noticeId], map: "user_notice_notice_id_fkey")
  @@map("user_notice")
}

model Todo {
  id          Int       @id @default(autoincrement())
  pid         Int?
  title       String
  content     String?
  sortOrder   Int?      @default(0) @map("sort_order")
  isDone      Boolean   @default(false)
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime? @updatedAt @map("updated_time")
  doneTime    DateTime? @map("done_time")
  userId      Int
  parent      Todo?     @relation("ParentChild", fields: [pid], references: [id])
  children    Todo[]    @relation("ParentChild")
  user        User      @relation(fields: [userId], references: [id])

  @@index([pid], map: "todo_pid_fkey")
  @@index([userId], map: "todo_userId_fkey")
  @@map("todo")
}

model Department {
  id          Int              @id @default(autoincrement())
  name        String
  code        String           @unique
  description String?
  level       Int              @default(1)
  sortOrder   Int              @default(0) @map("sort_order")
  status      Int              @default(0)
  managerId   Int?             @map("manager_id")
  isDeleted   Boolean          @default(false) @map("is_deleted")
  createdTime DateTime         @default(now()) @map("created_time")
  updatedTime DateTime         @updatedAt @map("updated_time")
  deletedTime DateTime?        @map("deleted_time")
  parentId    Int?             @map("parent_id")
  manager     User?            @relation("DepartmentManager", fields: [managerId], references: [id])
  parent      Department?      @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[]     @relation("DepartmentHierarchy")
  roles       RoleDepartment[] @relation("DepartmentRoles")
  users       User[]           @relation("UserDepartment")

  @@index([parentId], map: "department_parent_id_fkey")
  @@index([managerId], map: "department_manager_id_fkey")
  @@index([code])
  @@index([status])
  @@map("department")
}

model RoleDepartment {
  id              Int        @id @default(autoincrement())
  roleId          Int        @map("role_id")
  departmentId    Int        @map("department_id")
  autoAssign      Boolean    @default(false) @map("auto_assign")
  defaultPosition String?    @map("default_position")
  assignedAt      DateTime   @default(now()) @map("assigned_at")
  department      Department @relation("DepartmentRoles", fields: [departmentId], references: [id], onDelete: Cascade)
  role            Role       @relation("RoleDepartments", fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, departmentId])
  @@index([roleId], map: "role_department_role_id_fkey")
  @@index([departmentId], map: "role_department_department_id_fkey")
  @@index([autoAssign])
  @@map("role_department")
}

model OperationLog {
  id            Int             @id @default(autoincrement())
  userId        Int?            @map("user_id")
  username      String?
  operationType OperationType   @map("operation_type")
  module        String?
  description   String?
  method        String?
  url           String?
  params        String?         @db.Text
  result        String?         @db.Text
  status        OperationStatus @default(SUCCESS)
  errorMessage  String?         @map("error_message") @db.Text
  ipAddress     String?         @map("ip_address")
  userAgent     String?         @map("user_agent") @db.Text
  duration      Int?
  createdTime   DateTime        @default(now()) @map("created_time")
  user          User?           @relation(fields: [userId], references: [id])

  @@index([userId], map: "operation_log_user_id_fkey")
  @@index([operationType])
  @@index([createdTime])
  @@index([status])
  @@map("operation_log")
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
  FILE
  EMAIL
  URL
  PASSWORD
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum NoticeType {
  NOTICE
  INFO
  ACTIVITY
}

enum OperationType {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  OTHER
}

enum OperationStatus {
  SUCCESS
  FAILED
  PENDING
}

// ==================== 博客系统相关模型 ====================

// 博客文章状态枚举
enum BlogPostStatus {
  DRAFT // 草稿
  PUBLISHED // 已发布
  ARCHIVED // 已归档
}

// 评论状态枚举
enum BlogCommentStatus {
  PENDING // 待审核
  APPROVED // 已通过
  REJECTED // 已拒绝
}

// 博客分类表
model BlogCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique // 分类名称
  slug        String    @unique // URL友好的标识符
  description String? // 分类描述
  icon        String? // 分类图标
  color       String? // 分类颜色
  parentId    Int?      @map("parent_id") // 父分类ID
  sortOrder   Int       @default(0) @map("sort_order") // 排序
  postCount   Int       @default(0) @map("post_count") // 文章数量（冗余字段）
  isDeleted   Boolean   @default(false) @map("is_deleted")
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime  @updatedAt @map("updated_time")
  deletedTime DateTime? @map("deleted_time")

  // 关系
  parent   BlogCategory?  @relation("CategoryParentChild", fields: [parentId], references: [id])
  children BlogCategory[] @relation("CategoryParentChild")
  posts    BlogPost[]

  @@index([parentId])
  @@index([sortOrder])
  @@map("blog_category")
}

// 博客标签表
model BlogTag {
  id          Int       @id @default(autoincrement())
  name        String    @unique // 标签名称
  slug        String    @unique // URL友好的标识符
  description String? // 标签描述
  color       String? // 标签颜色
  icon        String? // 标签图标
  useCount    Int       @default(0) @map("use_count") // 使用次数（冗余字段）
  isDeleted   Boolean   @default(false) @map("is_deleted")
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime  @updatedAt @map("updated_time")
  deletedTime DateTime? @map("deleted_time")

  // 关系
  postTags BlogPostTag[]

  @@index([useCount])
  @@map("blog_tag")
}

// 博客文章表
model BlogPost {
  id           Int            @id @default(autoincrement())
  title        String // 文章标题
  slug         String         @unique // URL友好的标识符
  summary      String?        @db.Text // 文章摘要
  content      String         @db.LongText // Markdown内容
  coverImage   String?        @map("cover_image") // 封面图片
  status       BlogPostStatus @default(DRAFT) // 文章状态
  isTop        Boolean        @default(false) @map("is_top") // 是否置顶
  allowComment Boolean        @default(true) @map("allow_comment") // 是否允许评论
  viewCount    Int            @default(0) @map("view_count") // 浏览次数
  likeCount    Int            @default(0) @map("like_count") // 点赞次数
  commentCount Int            @default(0) @map("comment_count") // 评论次数
  authorId     Int            @map("author_id") // 作者ID
  categoryId   Int?           @map("category_id") // 分类ID
  publishedAt  DateTime?      @map("published_at") // 发布时间
  isDeleted    Boolean        @default(false) @map("is_deleted")
  createdTime  DateTime       @default(now()) @map("created_time")
  updatedTime  DateTime       @updatedAt @map("updated_time")
  deletedTime  DateTime?      @map("deleted_time")

  // 关系
  author   User           @relation(fields: [authorId], references: [id])
  category BlogCategory?  @relation(fields: [categoryId], references: [id])
  tags     BlogPostTag[]
  comments BlogComment[]
  likes    BlogPostLike[]

  @@index([authorId])
  @@index([categoryId])
  @@index([status, publishedAt])
  @@index([isTop, publishedAt])
  @@index([slug])
  @@map("blog_post")
}

// 博客文章标签关联表
model BlogPostTag {
  id     Int @id @default(autoincrement())
  postId Int @map("post_id")
  tagId  Int @map("tag_id")

  // 关系
  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("blog_post_tag")
}

// 博客评论表
model BlogComment {
  id          Int               @id @default(autoincrement())
  content     String            @db.Text // 评论内容
  authorName  String?           @map("author_name") // 游客姓名
  authorEmail String?           @map("author_email") // 游客邮箱
  authorUrl   String?           @map("author_url") // 游客网站
  authorIp    String?           @map("author_ip") // 评论者IP
  userAgent   String?           @map("user_agent") // 用户代理
  status      BlogCommentStatus @default(PENDING) // 评论状态
  likeCount   Int               @default(0) @map("like_count") // 点赞次数
  postId      Int               @map("post_id") // 文章ID
  userId      Int?              @map("user_id") // 用户ID（注册用户）
  parentId    Int?              @map("parent_id") // 父评论ID
  isDeleted   Boolean           @default(false) @map("is_deleted")
  createdTime DateTime          @default(now()) @map("created_time")
  updatedTime DateTime          @updatedAt @map("updated_time")
  deletedTime DateTime?         @map("deleted_time")

  // 关系
  post     BlogPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User?             @relation(fields: [userId], references: [id])
  parent   BlogComment?      @relation("CommentParentChild", fields: [parentId], references: [id])
  children BlogComment[]     @relation("CommentParentChild")
  likes    BlogCommentLike[]

  @@index([postId, status])
  @@index([userId])
  @@index([parentId])
  @@index([createdTime])
  @@map("blog_comment")
}

// 博客文章点赞表
model BlogPostLike {
  id          Int      @id @default(autoincrement())
  postId      Int      @map("post_id")
  userId      Int?     @map("user_id") // 用户ID（注册用户）
  guestId     String?  @map("guest_id") // 游客标识（如IP+UserAgent的hash）
  ipAddress   String?  @map("ip_address") // IP地址
  createdTime DateTime @default(now()) @map("created_time")

  // 关系
  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User?    @relation(fields: [userId], references: [id])

  @@unique([postId, userId]) // 注册用户每篇文章只能点赞一次
  @@unique([postId, guestId]) // 游客每篇文章只能点赞一次
  @@index([postId])
  @@map("blog_post_like")
}

// 博客评论点赞表
model BlogCommentLike {
  id          Int      @id @default(autoincrement())
  commentId   Int      @map("comment_id")
  userId      Int?     @map("user_id") // 用户ID（注册用户）
  guestId     String?  @map("guest_id") // 游客标识
  ipAddress   String?  @map("ip_address") // IP地址
  createdTime DateTime @default(now()) @map("created_time")

  // 关系
  comment BlogComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User?       @relation(fields: [userId], references: [id])

  @@unique([commentId, userId]) // 注册用户每条评论只能点赞一次
  @@unique([commentId, guestId]) // 游客每条评论只能点赞一次
  @@index([commentId])
  @@map("blog_comment_like")
}

// 博客配置表
model BlogConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique // 配置键
  value       String?  @db.Text // 配置值（JSON格式）
  description String? // 配置描述
  category    String? // 配置分类
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime @updatedAt @map("updated_time")

  @@index([category])
  @@map("blog_config")
}

// 友情链接表
model BlogFriendLink {
  id          Int       @id @default(autoincrement())
  name        String // 链接名称
  url         String // 链接地址
  description String? // 链接描述
  avatar      String? // 链接头像
  sortOrder   Int       @default(0) @map("sort_order") // 排序
  isVisible   Boolean   @default(true) @map("is_visible") // 是否显示
  isDeleted   Boolean   @default(false) @map("is_deleted")
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime  @updatedAt @map("updated_time")
  deletedTime DateTime? @map("deleted_time")

  @@index([sortOrder])
  @@index([isVisible])
  @@map("blog_friend_link")
}
