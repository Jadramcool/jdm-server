openapi: 3.0.0
info:
  title: JDM Server API Documentation
  version: 1.0.0
  description: 基于Express + TypeScript + Prisma的后端API文档
  contact:
    name: JDM
    email: your-email@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000/api
    description: 本地开发服务器
  - url: https://your-domain.com/api
    description: 生产环境服务器
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT认证，格式：Bearer <token>
  responses:
    UnauthorizedError:
      description: 认证失败
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 401
              message:
                type: string
                example: 未授权访问
    ValidationError:
      description: 参数验证失败
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: 参数验证失败
              errors:
                type: array
                items:
                  type: string
  schemas:
    UploadResult:
      type: object
      properties:
        fileUrl:
          type: string
          description: 文件访问URL
        fileName:
          type: string
          description: 文件名
        fileSize:
          type: number
          description: 文件大小（字节）
        mimeType:
          type: string
          description: 文件MIME类型
        originalName:
          type: string
          description: 原始文件名
        uploadTime:
          type: string
          format: date-time
          description: 上传时间
    BatchUploadResult:
      type: object
      properties:
        successFiles:
          type: array
          items:
            $ref: '#/components/schemas/UploadResult'
          description: 成功上传的文件列表
        failedFiles:
          type: array
          items:
            type: object
            properties:
              fileName:
                type: string
              error:
                type: string
          description: 上传失败的文件列表
        totalCount:
          type: number
          description: 总文件数
        successCount:
          type: number
          description: 成功上传数
        failedCount:
          type: number
          description: 失败上传数
    UnifiedUploadResult:
      type: object
      properties:
        local:
          $ref: '#/components/schemas/UploadResult'
          description: 本地上传结果
        oss:
          $ref: '#/components/schemas/UploadResult'
          description: OSS上传结果
        target:
          type: string
          enum:
            - local
            - oss
            - both
          description: 实际上传目标
    ApiResponse:
      type: object
      properties:
        data:
          description: 响应数据
        code:
          type: number
          description: 状态码
        message:
          type: string
          description: 响应消息
        errMsg:
          type: string
          description: 错误信息
tags:
  - name: Auth
    description: 认证相关接口
  - name: User
    description: 用户管理
  - name: System User
    description: 系统用户管理
  - name: System Role
    description: 角色管理
  - name: System Menu
    description: 菜单管理
  - name: System Department
    description: 部门管理
  - name: Notice
    description: 通知管理
  - name: Todo
    description: 待办事项
  - name: AI Chat
    description: AI聊天服务
  - name: Upload
    description: 文件上传
  - name: Navigation
    description: 导航管理
  - name: System Config
    description: 系统配置管理
  - name: Operation Log
    description: 操作日志管理相关接口
paths:
  /aiChat/zhipu-chat:
    post:
      summary: 智谱清言AI聊天
      tags:
        - AI Chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: 用户消息
                  example: 你好，请介绍一下自己
                model:
                  type: string
                  description: 模型名称
                  default: glm-4
                temperature:
                  type: number
                  description: 温度参数
                  minimum: 0
                  maximum: 1
                  default: 0.7
      responses:
        '200':
          description: AI聊天成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      reply:
                        type: string
                        description: AI回复内容
        '401':
          description: 未授权
        '500':
          description: 服务器错误
  /aiChat/chat:
    post:
      summary: AI流式聊天
      description: 使用流式传输的AI聊天接口，实时返回AI回复
      tags:
        - AI Chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: 用户消息
                  example: 请帮我写一个Python函数
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum:
                          - user
                          - assistant
                          - system
                      content:
                        type: string
                  description: 聊天历史记录
                model:
                  type: string
                  description: 模型名称
                  default: gpt-3.5-turbo
                temperature:
                  type: number
                  description: 温度参数
                  minimum: 0
                  maximum: 2
                  default: 0.7
      responses:
        '200':
          description: 流式AI聊天响应
          content:
            text/plain:
              schema:
                type: string
                description: 流式返回的AI回复内容
        '401':
          description: 未授权
        '500':
          description: 服务器错误
  /notice/list:
    get:
      summary: 获取通知列表
      tags:
        - Notice
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 每页数量
        - in: query
          name: title
          schema:
            type: string
          description: 通知标题关键词
        - in: query
          name: type
          schema:
            type: string
            enum:
              - system
              - user
              - announcement
          description: 通知类型
        - in: query
          name: status
          schema:
            type: string
            enum:
              - draft
              - published
              - archived
          description: 通知状态
      responses:
        '200':
          description: 获取通知列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            title:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            status:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                      total:
                        type: number
                      page:
                        type: number
                      pageSize:
                        type: number
        '401':
          description: 未授权
  /notice/detail/{id}:
    get:
      summary: 获取通知详情
      tags:
        - Notice
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 通知ID
      responses:
        '200':
          description: 获取通知详情成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      title:
                        type: string
                      content:
                        type: string
                      type:
                        type: string
                      status:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '401':
          description: 未授权
        '404':
          description: 通知不存在
  /notice/create:
    post:
      summary: 创建通知
      tags:
        - Notice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - type
              properties:
                title:
                  type: string
                  description: 通知标题
                  example: 系统维护通知
                content:
                  type: string
                  description: 通知内容
                  example: 系统将于今晚进行维护，预计维护时间2小时
                type:
                  type: string
                  enum:
                    - system
                    - user
                    - announcement
                  description: 通知类型
                  example: system
                status:
                  type: string
                  enum:
                    - draft
                    - published
                    - archived
                  description: 通知状态
                  default: draft
                priority:
                  type: string
                  enum:
                    - low
                    - normal
                    - high
                    - urgent
                  description: 优先级
                  default: normal
                targetUsers:
                  type: array
                  items:
                    type: integer
                  description: 目标用户ID列表
      responses:
        '200':
          description: 创建通知成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 创建成功
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        description: 新创建的通知ID
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
  /notice/update:
    put:
      summary: 更新通知
      tags:
        - Notice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: number
                  description: 通知ID
                title:
                  type: string
                  description: 通知标题
                content:
                  type: string
                  description: 通知内容
                type:
                  type: string
                  enum:
                    - system
                    - user
                    - announcement
                  description: 通知类型
                status:
                  type: string
                  enum:
                    - draft
                    - published
                    - archived
                  description: 通知状态
                priority:
                  type: string
                  enum:
                    - low
                    - normal
                    - high
                    - urgent
                  description: 优先级
                targetUsers:
                  type: array
                  items:
                    type: integer
                  description: 目标用户ID列表
      responses:
        '200':
          description: 更新通知成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 更新成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '404':
          description: 通知不存在
  /notice/delete/{id}:
    delete:
      summary: 删除通知
      tags:
        - Notice
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 通知ID
      responses:
        '200':
          description: 删除通知成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除成功
                  data:
                    type: object
        '401':
          description: 未授权
        '404':
          description: 通知不存在
  /notice/send:
    post:
      summary: 发送通知
      description: 将通知发送给指定用户或所有用户
      tags:
        - Notice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - noticeId
              properties:
                noticeId:
                  type: number
                  description: 通知ID
                userIds:
                  type: array
                  items:
                    type: integer
                  description: 目标用户ID列表，为空则发送给所有用户
                sendAll:
                  type: boolean
                  description: 是否发送给所有用户
                  default: false
      responses:
        '200':
          description: 发送通知成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 发送成功
                  data:
                    type: object
                    properties:
                      sentCount:
                        type: number
                        description: 发送成功的用户数量
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '404':
          description: 通知不存在
  /notice/userNotice:
    get:
      summary: 获取用户通知列表
      description: 获取当前用户的通知列表
      tags:
        - Notice
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 每页数量
        - in: query
          name: isRead
          schema:
            type: boolean
          description: 是否已读（true=已读，false=未读）
        - in: query
          name: type
          schema:
            type: string
            enum:
              - system
              - user
              - announcement
          description: 通知类型
      responses:
        '200':
          description: 获取用户通知列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            title:
                              type: string
                            content:
                              type: string
                            type:
                              type: string
                            isRead:
                              type: boolean
                            readAt:
                              type: string
                              format: date-time
                            createdAt:
                              type: string
                              format: date-time
                      total:
                        type: number
                      unreadCount:
                        type: number
                        description: 未读通知数量
        '401':
          description: 未授权
  /notice/read:
    put:
      summary: 标记通知为已读
      description: 将指定通知标记为已读状态
      tags:
        - Notice
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                noticeId:
                  type: number
                  description: 通知ID
                noticeIds:
                  type: array
                  items:
                    type: integer
                  description: 批量标记的通知ID列表
                markAllRead:
                  type: boolean
                  description: 是否标记所有通知为已读
                  default: false
      responses:
        '200':
          description: 标记已读成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 标记成功
                  data:
                    type: object
                    properties:
                      readCount:
                        type: number
                        description: 标记为已读的通知数量
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '404':
          description: 通知不存在
  /todo/list:
    get:
      summary: 获取待办事项列表
      tags:
        - Todo
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 每页数量
        - in: query
          name: title
          schema:
            type: string
          description: 待办事项标题关键词
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - in_progress
              - completed
              - cancelled
          description: 待办事项状态
        - in: query
          name: priority
          schema:
            type: string
            enum:
              - low
              - normal
              - high
              - urgent
          description: 优先级
        - in: query
          name: dueDate
          schema:
            type: string
            format: date
          description: 截止日期
      responses:
        '200':
          description: 获取待办事项列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            title:
                              type: string
                            description:
                              type: string
                            status:
                              type: string
                            priority:
                              type: string
                            dueDate:
                              type: string
                              format: date-time
                            createdAt:
                              type: string
                              format: date-time
                      total:
                        type: number
                      page:
                        type: number
                      pageSize:
                        type: number
        '401':
          description: 未授权
  /todo/detail/{id}:
    get:
      summary: 获取待办事项详情
      tags:
        - Todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 待办事项ID
      responses:
        '200':
          description: 获取待办事项详情成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      title:
                        type: string
                      description:
                        type: string
                      status:
                        type: string
                      priority:
                        type: string
                      dueDate:
                        type: string
                        format: date-time
                      completedAt:
                        type: string
                        format: date-time
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        '401':
          description: 未授权
        '404':
          description: 待办事项不存在
  /todo/create:
    post:
      summary: 创建待办事项
      tags:
        - Todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: 待办事项标题
                  example: 完成项目文档
                description:
                  type: string
                  description: 待办事项描述
                  example: 编写项目的技术文档和用户手册
                priority:
                  type: string
                  enum:
                    - low
                    - normal
                    - high
                    - urgent
                  description: 优先级
                  default: normal
                dueDate:
                  type: string
                  format: date-time
                  description: 截止日期
                tags:
                  type: array
                  items:
                    type: string
                  description: 标签列表
                assigneeId:
                  type: number
                  description: 指派给的用户ID
      responses:
        '200':
          description: 创建待办事项成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 创建成功
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        description: 新创建的待办事项ID
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
  /todo/update:
    put:
      summary: 更新待办事项
      tags:
        - Todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: number
                  description: 待办事项ID
                title:
                  type: string
                  description: 待办事项标题
                description:
                  type: string
                  description: 待办事项描述
                status:
                  type: string
                  enum:
                    - pending
                    - in_progress
                    - completed
                    - cancelled
                  description: 待办事项状态
                priority:
                  type: string
                  enum:
                    - low
                    - normal
                    - high
                    - urgent
                  description: 优先级
                dueDate:
                  type: string
                  format: date-time
                  description: 截止日期
                tags:
                  type: array
                  items:
                    type: string
                  description: 标签列表
                assigneeId:
                  type: number
                  description: 指派给的用户ID
      responses:
        '200':
          description: 更新待办事项成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 更新成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '404':
          description: 待办事项不存在
  /todo/updateOrder:
    put:
      summary: 更新待办事项排序
      description: 批量更新待办事项的排序顺序
      tags:
        - Todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - todoOrders
              properties:
                todoOrders:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                        description: 待办事项ID
                      order:
                        type: number
                        description: 排序值
                  description: 待办事项排序列表
                  example:
                    - id: 1
                      order: 1
                    - id: 2
                      order: 2
      responses:
        '200':
          description: 更新排序成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 排序更新成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
  /todo/delete/{id}:
    delete:
      summary: 删除待办事项
      tags:
        - Todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 待办事项ID
      responses:
        '200':
          description: 删除待办事项成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除成功
                  data:
                    type: object
        '401':
          description: 未授权
        '404':
          description: 待办事项不存在
  /todo/done/{id}/{status}:
    put:
      summary: 标记待办事项完成状态
      description: 将待办事项标记为完成或未完成，status可传可不传，不传默认为已完成，0：未完成，1：已完成
      tags:
        - Todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 待办事项ID
        - in: path
          name: status
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
            default: 1
          description: 完成状态（0=未完成，1=已完成）
      responses:
        '200':
          description: 状态更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 状态更新成功
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      status:
                        type: integer
                      completedAt:
                        type: string
                        format: date-time
        '401':
          description: 未授权
        '404':
          description: 待办事项不存在
  /todo/timeline:
    get:
      summary: 获取待办事项时间线
      description: 获取待办事项的时间线视图，按日期分组显示
      tags:
        - Todo
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: 开始日期
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: 结束日期
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - in_progress
              - completed
              - cancelled
          description: 待办事项状态
        - in: query
          name: priority
          schema:
            type: string
            enum:
              - low
              - normal
              - high
              - urgent
          description: 优先级
      responses:
        '200':
          description: 获取时间线成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      timeline:
                        type: array
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              format: date
                              description: 日期
                            todos:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: number
                                  title:
                                    type: string
                                  status:
                                    type: string
                                  priority:
                                    type: string
                                  dueDate:
                                    type: string
                                    format: date-time
                      summary:
                        type: object
                        properties:
                          total:
                            type: number
                          completed:
                            type: number
                          pending:
                            type: number
                          overdue:
                            type: number
        '401':
          description: 未授权
  /system/config/list:
    get:
      summary: 获取配置列表
      tags:
        - System Config
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: 配置分类
        - in: query
          name: type
          schema:
            type: string
            enum:
              - STRING
              - NUMBER
              - BOOLEAN
              - JSON
              - ARRAY
              - FILE
              - EMAIL
              - URL
              - PASSWORD
          description: 配置类型
        - in: query
          name: keyword
          schema:
            type: string
          description: 搜索关键词
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            default: 10
          description: 每页数量
      responses:
        '200':
          description: 获取配置列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 获取配置列表成功
                  data:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Config'
                          pagination:
                            type: object
                            properties:
                              page:
                                type: number
                                example: 1
                              pageSize:
                                type: number
                                example: 10
                              totalRecords:
                                type: number
                                example: 100
                              totalPages:
                                type: number
                                example: 10
        '401':
          description: 未授权
        '500':
          description: 服务器错误
  /system/config/public:
    get:
      summary: 获取公开配置
      description: 获取所有公开的系统配置，无需认证
      tags:
        - System Config
      responses:
        '200':
          description: 获取公开配置成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 获取公开配置成功
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Config'
        '500':
          description: 服务器错误
  /system/config/detail/{id}:
    get:
      summary: 根据ID获取配置
      tags:
        - System Config
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 配置ID
      responses:
        '200':
          description: 获取配置成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 获取配置成功
                  data:
                    $ref: '#/components/schemas/Config'
        '401':
          description: 未授权
        '404':
          description: 配置不存在
        '500':
          description: 服务器错误
  /system/config/key/{key}:
    get:
      summary: 根据键名获取配置值
      tags:
        - System Config
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
          description: 配置键名
          example: system.siteName
      responses:
        '200':
          description: 获取配置值成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 获取配置值成功
                  data:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: object
                      - type: array
        '401':
          description: 未授权
        '404':
          description: 配置不存在
        '500':
          description: 服务器错误
  /system/config/create:
    post:
      summary: 创建新配置
      tags:
        - System Config
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigDto'
      responses:
        '200':
          description: 创建配置成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 创建配置成功
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: 参数错误
        '401':
          description: 未授权
        '409':
          description: 配置键名已存在
        '500':
          description: 服务器错误
  /system/config/update:
    put:
      summary: 更新配置
      tags:
        - System Config
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/ConfigDto'
                - type: object
                  properties:
                    id:
                      type: integer
                      description: 配置ID
                      example: 1
                  required:
                    - id
      responses:
        '200':
          description: 更新配置成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 更新配置成功
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          description: 参数错误
        '401':
          description: 未授权
        '404':
          description: 配置不存在
        '500':
          description: 服务器错误
  /system/config/batch-update:
    put:
      summary: 批量更新配置
      tags:
        - System Config
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configs:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 配置ID
                      value:
                        type: string
                        description: 配置值
      responses:
        '200':
          description: 批量更新配置成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 批量更新配置成功
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Config'
        '400':
          description: 参数错误
        '401':
          description: 未授权
        '500':
          description: 服务器错误
  /system/config/delete/{id}:
    delete:
      summary: 删除配置
      tags:
        - System Config
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 配置ID
      responses:
        '200':
          description: 删除配置成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除配置成功
                  data:
                    type: null
        '401':
          description: 未授权
        '404':
          description: 配置不存在
        '500':
          description: 服务器错误
  /system/config/validate-password:
    post:
      summary: 验证密码配置
      tags:
        - System Config
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - key
                - password
              properties:
                key:
                  type: string
                  description: 配置键名
                  example: admin.password
                password:
                  type: string
                  description: 要验证的密码
      responses:
        '200':
          description: 验证完成
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 验证完成
                  data:
                    type: object
                    properties:
                      isValid:
                        type: boolean
                        description: 密码是否正确
        '400':
          description: 参数错误
        '401':
          description: 未授权
        '404':
          description: 配置不存在
        '500':
          description: 服务器错误
  /system/department/create:
    post:
      summary: 创建部门
      tags:
        - System Department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - code
              properties:
                name:
                  type: string
                  description: 部门名称
                  example: 技术部
                code:
                  type: string
                  description: 部门编码
                  example: TECH001
                description:
                  type: string
                  description: 部门描述
                  example: 负责技术研发工作
                parentId:
                  type: integer
                  description: 父部门ID
                  example: 1
                managerId:
                  type: integer
                  description: 部门负责人ID
                  example: 1
                sortOrder:
                  type: integer
                  description: 排序
                  minimum: 0
                  example: 1
                status:
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
                    - ARCHIVED
                  description: 部门状态
                  example: ACTIVE
      responses:
        '201':
          description: 部门创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 部门创建成功
                  data:
                    type: object
                    description: 创建的部门信息
        '400':
          description: 请求参数错误
        '409':
          description: 部门编码已存在
        '500':
          description: 服务器内部错误
  /system/department/update:
    put:
      summary: 更新部门信息
      tags:
        - System Department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: 部门ID
                  example: 1
                name:
                  type: string
                  description: 部门名称
                  example: 技术部
                code:
                  type: string
                  description: 部门编码
                  example: TECH001
                description:
                  type: string
                  description: 部门描述
                  example: 负责技术研发工作
                parentId:
                  type: integer
                  description: 父部门ID
                  example: 1
                managerId:
                  type: integer
                  description: 部门负责人ID
                  example: 1
                sortOrder:
                  type: integer
                  description: 排序
                  minimum: 0
                  example: 1
                status:
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
                    - ARCHIVED
                  description: 部门状态
                  example: ACTIVE
      responses:
        '200':
          description: 部门更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 部门更新成功
                  data:
                    type: object
                    description: 更新后的部门信息
        '400':
          description: 请求参数错误
        '404':
          description: 部门不存在
        '409':
          description: 部门编码已存在
        '500':
          description: 服务器内部错误
  /system/department/list:
    get:
      summary: 获取部门列表（分页）
      tags:
        - System Department
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: 每页数量
        - in: query
          name: name
          schema:
            type: string
          description: 部门名称关键字
        - in: query
          name: code
          schema:
            type: string
          description: 部门编码关键字
        - in: query
          name: parentId
          schema:
            type: integer
          description: 父部门ID
        - in: query
          name: status
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
              - ARCHIVED
          description: 部门状态
        - in: query
          name: includeChildren
          schema:
            type: boolean
          description: 是否包含子部门
      responses:
        '200':
          description: 获取部门列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 获取部门列表成功
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                      total:
                        type: integer
                      page:
                        type: integer
                      pageSize:
                        type: integer
        '500':
          description: 服务器内部错误
  /system/department/tree:
    get:
      summary: 获取部门树形结构
      tags:
        - System Department
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: parentId
          schema:
            type: integer
          description: 父部门ID，不传则获取所有根部门
      responses:
        '200':
          description: 获取部门树形结构成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 获取部门树形结构成功
                  data:
                    type: array
                    description: 部门树形结构
        '500':
          description: 服务器内部错误
  /system/department/detail/{id}:
    get:
      summary: 获取部门详情
      tags:
        - System Department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 部门ID
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 获取成功
                  data:
                    type: object
                    description: 部门详情
        '400':
          description: 部门不存在
        '401':
          description: 未授权
  /system/department/delete/{id}:
    delete:
      summary: 删除部门
      tags:
        - System Department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 部门ID
      responses:
        '200':
          description: 删除成功
        '400':
          description: 删除失败
        '401':
          description: 未授权
  /system/department/members/{id}:
    get:
      summary: 获取部门成员列表
      tags:
        - System Department
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 部门ID
        - in: query
          name: includeInactive
          schema:
            type: boolean
            default: false
          description: 是否包含非激活用户
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 获取成功
                  data:
                    type: array
                    description: 部门成员列表
        '401':
          description: 未授权
  /system/department/assign-user:
    post:
      summary: 分配用户到部门
      tags:
        - System Department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - departmentId
              properties:
                userId:
                  type: integer
                  description: 用户ID
                  example: 1
                departmentId:
                  type: integer
                  description: 部门ID
                  example: 1
                isMain:
                  type: boolean
                  description: 是否为主部门
                  example: true
                position:
                  type: string
                  description: 职位
                  example: 高级工程师
      responses:
        '200':
          description: 分配成功
        '400':
          description: 分配失败
        '401':
          description: 未授权
  /system/department/batch-assign-users:
    post:
      summary: 批量分配用户到部门
      tags:
        - System Department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
                - departmentId
              properties:
                userIds:
                  type: array
                  items:
                    type: integer
                  description: 用户ID数组
                  example:
                    - 1
                    - 2
                    - 3
                departmentId:
                  type: integer
                  description: 部门ID
                  example: 1
                defaultPosition:
                  type: string
                  description: 默认职位
                  example: 普通员工
      responses:
        '200':
          description: 批量分配完成
        '400':
          description: 分配失败
        '401':
          description: 未授权
  /system/department/remove-user:
    delete:
      summary: 从部门移除用户
      tags:
        - System Department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - departmentId
              properties:
                userId:
                  type: integer
                  description: 用户ID
                  example: 1
                departmentId:
                  type: integer
                  description: 部门ID
                  example: 1
      responses:
        '200':
          description: 移除成功
        '400':
          description: 移除失败
        '401':
          description: 未授权
  /system/department/assign-role:
    post:
      summary: 分配角色到部门
      tags:
        - System Department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
                - departmentId
              properties:
                roleId:
                  type: integer
                  description: 角色ID
                  example: 1
                departmentId:
                  type: integer
                  description: 部门ID
                  example: 1
                autoAssign:
                  type: boolean
                  description: 是否自动分配给该部门用户
                  example: true
                defaultPosition:
                  type: string
                  description: 默认职位
                  example: 普通员工
      responses:
        '200':
          description: 分配成功
        '400':
          description: 分配失败
        '401':
          description: 未授权
  /system/department/remove-role:
    delete:
      summary: 从部门移除角色
      tags:
        - System Department
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
                - departmentId
              properties:
                roleId:
                  type: integer
                  description: 角色ID
                  example: 1
                departmentId:
                  type: integer
                  description: 部门ID
                  example: 1
      responses:
        '200':
          description: 移除成功
        '400':
          description: 移除失败
        '401':
          description: 未授权
  /system/department/search:
    get:
      summary: 搜索部门
      tags:
        - System Department
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: keyword
          required: true
          schema:
            type: string
          description: 搜索关键字
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            maximum: 50
          description: 限制数量
      responses:
        '200':
          description: 搜索成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 搜索成功
                  data:
                    type: array
                    description: 搜索结果
        '401':
          description: 未授权
  /system/department/stats:
    get:
      summary: 获取部门统计信息
      tags:
        - System Department
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: departmentId
          schema:
            type: integer
          description: 部门ID，不传则获取全部统计
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 获取成功
                  data:
                    type: object
                    properties:
                      totalDepartments:
                        type: integer
                        description: 总部门数
                      activeDepartments:
                        type: integer
                        description: 激活部门数
                      inactiveDepartments:
                        type: integer
                        description: 非激活部门数
                      totalMembers:
                        type: integer
                        description: 总成员数
        '401':
          description: 未授权
  /system/menu/list:
    get:
      summary: 获取菜单列表
      tags:
        - System Menu
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            default: 10
          description: 每页数量
        - in: query
          name: keyword
          schema:
            type: string
          description: 搜索关键词
      responses:
        '200':
          description: 获取菜单列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          $ref: '#/components/schemas/Menu'
                      total:
                        type: number
        '401':
          description: 未授权
  /system/menu/create:
    post:
      summary: 创建菜单
      tags:
        - System Menu
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - path
              properties:
                name:
                  type: string
                  description: 菜单名称
                path:
                  type: string
                  description: 菜单路径
                icon:
                  type: string
                  description: 菜单图标
                parentId:
                  type: number
                  description: 父菜单ID
                sortOrder:
                  type: number
                  description: 排序
                isVisible:
                  type: boolean
                  description: 是否可见
      responses:
        '200':
          description: 创建菜单成功
        '400':
          description: 参数错误
        '401':
          description: 未授权
  /system/menu/update:
    put:
      summary: 更新菜单
      tags:
        - System Menu
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: number
                  description: 菜单ID
                name:
                  type: string
                  description: 菜单名称
                path:
                  type: string
                  description: 菜单路径
                component:
                  type: string
                  description: 组件路径
                icon:
                  type: string
                  description: 菜单图标
                parentId:
                  type: number
                  description: 父级菜单ID
                sort:
                  type: number
                  description: 排序
                type:
                  type: string
                  enum:
                    - menu
                    - button
                  description: 菜单类型
                permission:
                  type: string
                  description: 权限标识
                status:
                  type: boolean
                  description: 状态
      responses:
        '200':
          description: 更新菜单成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 更新成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '404':
          description: 菜单不存在
  /system/menu/delete/{id}:
    delete:
      summary: 删除菜单
      tags:
        - System Menu
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 菜单ID
      responses:
        '200':
          description: 删除菜单成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除成功
                  data:
                    type: object
        '401':
          description: 未授权
        '403':
          description: 菜单下有子菜单，无法删除
        '404':
          description: 菜单不存在
  /system/menu/batchDelete:
    put:
      summary: 批量删除菜单
      tags:
        - System Menu
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: number
                  description: 菜单ID数组
      responses:
        '200':
          description: 批量删除菜单成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '403':
          description: 部分菜单下有子菜单，无法删除
  /system/menu/onlineMenus:
    get:
      summary: 获取在线菜单列表
      tags:
        - System Menu
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            default: 10
          description: 每页数量
        - in: query
          name: keyword
          schema:
            type: string
          description: 搜索关键词
      responses:
        '200':
          description: 获取在线菜单列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          $ref: '#/components/schemas/Menu'
                      total:
                        type: number
  /system/operation-log/list:
    get:
      summary: 获取操作日志列表
      tags:
        - Operation Log
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
          description: 每页数量
        - in: query
          name: operationType
          schema:
            type: string
          description: 操作类型
        - in: query
          name: operationStatus
          schema:
            type: string
          description: 操作状态
        - in: query
          name: userId
          schema:
            type: integer
          description: 操作用户ID
        - in: query
          name: module
          schema:
            type: string
          description: 操作模块
        - in: query
          name: startTime
          schema:
            type: string
            format: date-time
          description: 开始时间
        - in: query
          name: endTime
          schema:
            type: string
            format: date-time
          description: 结束时间
      responses:
        '200':
          description: 获取操作日志列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                      total:
                        type: number
                      page:
                        type: number
                      pageSize:
                        type: number
        '401':
          description: 未授权
  /system/operation-log/detail/{id}:
    get:
      summary: 获取操作日志详情
      tags:
        - Operation Log
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 操作日志ID
      responses:
        '200':
          description: 获取操作日志详情成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
        '401':
          description: 未授权
        '404':
          description: 操作日志不存在
  /system/operation-log/stats:
    get:
      summary: 获取操作日志统计信息
      tags:
        - Operation Log
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取统计信息成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      total:
                        type: number
                      todayCount:
                        type: number
                      successCount:
                        type: number
                      failureCount:
                        type: number
                      typeStats:
                        type: array
                      moduleStats:
                        type: array
        '401':
          description: 未授权
  /system/operation-log/delete/{id}:
    delete:
      summary: 删除操作日志
      tags:
        - Operation Log
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 操作日志ID
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
        '401':
          description: 未授权
        '404':
          description: 操作日志不存在
  /system/operation-log/batch-delete:
    post:
      summary: 批量删除操作日志
      tags:
        - Operation Log
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  description: 要删除的日志ID数组
              required:
                - ids
      responses:
        '200':
          description: 批量删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
        '401':
          description: 未授权
  /system/operation-log/clear-expired:
    post:
      summary: 清理过期操作日志
      tags:
        - Operation Log
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                days:
                  type: integer
                  description: 保留天数，默认30天
      responses:
        '200':
          description: 清理成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      deletedCount:
                        type: number
        '401':
          description: 未授权
  /system/role/list:
    get:
      summary: 获取角色列表
      tags:
        - System Role
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            default: 10
          description: 每页数量
        - in: query
          name: keyword
          schema:
            type: string
          description: 搜索关键词
      responses:
        '200':
          description: 获取角色列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
                      total:
                        type: number
        '401':
          description: 未授权
  /system/role/create:
    post:
      summary: 创建角色
      tags:
        - System Role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: 角色名称
                description:
                  type: string
                  description: 角色描述
                permissions:
                  type: array
                  items:
                    type: string
                  description: 权限列表
      responses:
        '200':
          description: 创建角色成功
        '400':
          description: 参数错误
        '401':
          description: 未授权
        '409':
          description: 角色名称已存在
  /system/role/delete/{id}:
    delete:
      summary: 删除角色
      tags:
        - System Role
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 角色ID
      responses:
        '200':
          description: 删除角色成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除成功
                  data:
                    type: object
        '401':
          description: 未授权
        '403':
          description: 角色已被使用，无法删除
        '404':
          description: 角色不存在
  /system/role/detail/{id}:
    get:
      summary: 获取角色详情
      tags:
        - System Role
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 角色ID
      responses:
        '200':
          description: 获取角色详情成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 获取成功
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        description: 角色ID
                      name:
                        type: string
                        description: 角色名称
                      code:
                        type: string
                        description: 角色编码
                      description:
                        type: string
                        description: 角色描述
                      status:
                        type: boolean
                        description: 角色状态
                      sort:
                        type: number
                        description: 排序
                      createTime:
                        type: string
                        format: date-time
                        description: 创建时间
                      updateTime:
                        type: string
                        format: date-time
                        description: 更新时间
        '401':
          description: 未授权
        '404':
          description: 角色不存在
  /system/role/update/menu:
    post:
      summary: 更新角色菜单权限
      description: 为指定角色分配菜单权限
      tags:
        - System Role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
                - menuIds
              properties:
                roleId:
                  type: number
                  description: 角色ID
                menuIds:
                  type: array
                  items:
                    type: number
                  description: 菜单ID数组
                  example:
                    - 1
                    - 2
                    - 3
                    - 4
      responses:
        '200':
          description: 更新角色菜单权限成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 权限分配成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '404':
          description: 角色不存在
  /system/user/list:
    get:
      summary: 获取用户列表
      tags:
        - System User
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            default: 10
          description: 每页数量
        - in: query
          name: username
          schema:
            type: string
          description: 用户名搜索
        - in: query
          name: email
          schema:
            type: string
          description: 邮箱搜索
        - in: query
          name: status
          schema:
            type: integer
            enum:
              - 0
              - 1
          description: 用户状态（0-禁用，1-启用）
      responses:
        '200':
          description: 获取用户列表成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                            username:
                              type: string
                            email:
                              type: string
                            status:
                              type: number
                            createTime:
                              type: string
                              format: date-time
                      total:
                        type: number
        '401':
          description: 未授权
  /system/user/detail/{id}:
    get:
      summary: 获取用户详情
      tags:
        - System User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 用户ID
      responses:
        '200':
          description: 获取用户详情成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      username:
                        type: string
                      email:
                        type: string
                      avatar:
                        type: string
                      status:
                        type: number
                      roles:
                        type: array
                        items:
                          type: object
                      createTime:
                        type: string
                        format: date-time
                      updateTime:
                        type: string
                        format: date-time
        '401':
          description: 未授权
        '404':
          description: 用户不存在
  /system/user/create:
    post:
      summary: 创建用户
      tags:
        - System User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: 用户名
                email:
                  type: string
                  format: email
                  description: 邮箱
                password:
                  type: string
                  description: 密码
                avatar:
                  type: string
                  description: 头像URL
                status:
                  type: number
                  enum:
                    - 0
                    - 1
                  default: 1
                  description: 用户状态（0-禁用，1-启用）
                roleIds:
                  type: array
                  items:
                    type: number
                  description: 角色ID数组
      responses:
        '200':
          description: 创建用户成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 创建成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '409':
          description: 用户名或邮箱已存在
  /system/user/update:
    put:
      summary: 更新用户
      tags:
        - System User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: number
                  description: 用户ID
                username:
                  type: string
                  description: 用户名
                email:
                  type: string
                  format: email
                  description: 邮箱
                avatar:
                  type: string
                  description: 头像URL
                status:
                  type: number
                  enum:
                    - 0
                    - 1
                  description: 用户状态（0-禁用，1-启用）
                roleIds:
                  type: array
                  items:
                    type: number
                  description: 角色ID数组
      responses:
        '200':
          description: 更新用户成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 更新成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '404':
          description: 用户不存在
        '409':
          description: 用户名或邮箱已存在
  /system/user/delete/{id}:
    put:
      summary: 删除用户
      tags:
        - System User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 用户ID
      responses:
        '200':
          description: 删除用户成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除成功
                  data:
                    type: object
        '401':
          description: 未授权
        '403':
          description: 无法删除当前用户或超级管理员
        '404':
          description: 用户不存在
  /system/user/batchDelete:
    put:
      summary: 批量删除用户
      tags:
        - System User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: number
                  description: 用户ID数组
                  example:
                    - 1
                    - 2
                    - 3
      responses:
        '200':
          description: 批量删除用户成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 删除成功
                  data:
                    type: object
                    properties:
                      deletedCount:
                        type: number
                        description: 删除成功的用户数量
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '403':
          description: 部分用户无法删除
  /system/user/status/{id}:
    put:
      summary: 启用/禁用用户
      description: 更新用户的启用状态
      tags:
        - System User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: 用户ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: number
                  enum:
                    - 0
                    - 1
                  description: 用户状态（0-禁用，1-启用）
      responses:
        '200':
          description: 更新用户状态成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 状态更新成功
                  data:
                    type: object
        '400':
          description: 请求参数错误
        '401':
          description: 未授权
        '403':
          description: 无法禁用当前用户或超级管理员
        '404':
          description: 用户不存在
  /upload:
    post:
      tags:
        - 文件上传
      summary: 统一文件上传接口
      description: 支持多种文件类型预设和上传目标配置的统一文件上传接口
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 要上传的文件
                fileType:
                  type: string
                  enum:
                    - image
                    - document
                    - audio
                    - video
                    - archive
                    - avatar
                    - all
                  default: all
                  description: 文件类型预设
                target:
                  type: string
                  enum:
                    - local
                    - oss
                    - both
                  default: local
                  description: 上传目标
                folder:
                  type: string
                  description: 存储文件夹名称
                  default: files
                maxSize:
                  type: number
                  description: 自定义最大文件大小（字节）
                allowedMimeTypes:
                  type: array
                  items:
                    type: string
                  description: 自定义允许的MIME类型
                allowedExtensions:
                  type: array
                  items:
                    type: string
                  description: 自定义允许的文件扩展名
              required:
                - file
      responses:
        '200':
          description: 文件上传成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UnifiedUploadResult'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: 未授权
        '413':
          description: 文件大小超过限制
        '415':
          description: 不支持的文件类型
        '500':
          description: 服务器内部错误
  /upload/validate:
    post:
      tags:
        - 文件上传
      summary: 文件预验证
      description: 在实际上传前验证文件的类型和大小是否符合要求
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  description: 文件名
                  example: document.pdf
                fileSize:
                  type: number
                  description: 文件大小（字节）
                  example: 1048576
                mimeType:
                  type: string
                  description: 文件MIME类型
                  example: application/pdf
              required:
                - fileName
                - fileSize
                - mimeType
      responses:
        '200':
          description: 文件验证通过
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          valid:
                            type: boolean
                            example: true
        '400':
          description: 文件验证失败或参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: 未授权
        '500':
          description: 服务器内部错误
  /user/register:
    post:
      summary: 注册
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Invalid input
  /user/login:
    post:
      summary: 登录
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  default: admin
                password:
                  type: string
                  default: 123456..
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Unauthorized
  /user/info:
    get:
      summary: 获取用户信息
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取用户信息成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 获取用户信息成功
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      username:
                        type: string
                      email:
                        type: string
        '401':
          description: 未授权
  /user/userRole:
    get:
      summary: 获取用户角色
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取用户角色成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        description:
                          type: string
        '401':
          description: 未授权
  /user/menu:
    get:
      summary: 获取用户菜单
      description: 获取用户菜单列表，包括用户角色对应的菜单权限
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取用户菜单成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        path:
                          type: string
                        icon:
                          type: string
                        children:
                          type: array
        '401':
          description: 未授权
  /user/update:
    put:
      summary: 更新用户信息
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 用户名
                email:
                  type: string
                  description: 邮箱
                phone:
                  type: string
                  description: 手机号
                avatar:
                  type: string
                  description: 头像URL
      responses:
        '200':
          description: 更新用户信息成功
        '400':
          description: 参数错误
        '401':
          description: 未授权
  /user/checkPassword:
    post:
      summary: 验证用户密码
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  description: 当前密码
      responses:
        '200':
          description: 密码验证成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                  data:
                    type: boolean
        '400':
          description: 密码错误
        '401':
          description: 未授权
  /user/updatePassword:
    put:
      summary: 修改用户密码
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  description: 旧密码
                newPassword:
                  type: string
                  description: 新密码
                  minLength: 6
      responses:
        '200':
          description: 密码修改成功
        '400':
          description: 旧密码错误或新密码格式不正确
        '401':
          description: 未授权
