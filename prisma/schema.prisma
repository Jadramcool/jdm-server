generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 系统配置表
model SysConfig {
  id          Int      @id @default(autoincrement())
  name        String
  value       Boolean
  description String?
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime @updatedAt @map("updated_time")

  @@map("sys_config")
}

// 用户表
model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  name          String?
  phone         String?   @unique
  email         String?   @unique
  sex           Sex?      @default(OTHER)
  avatar        String?
  birthday      DateTime?
  createdTime   DateTime  @default(now()) @map("created_time")
  updatedTime   DateTime? @updatedAt @map("updated_time")
  deletedTime   DateTime? @map("deleted_time")
  password      String
  isDeleted     Boolean   @default(false) @map("is_deleted")
  status        Int       @default(0) // 0: 未激活, 1: 激活
<<<<<<< Updated upstream
  roleType      String?   @default("patient") @map("role_type") // 角色类型 admin, user, doctor, patient
=======
  roleType      String?   @default("user") @map("role_type") // 角色类型 admin, user
>>>>>>> Stashed changes
  city          String? // 城市
  address       String? // 地址
  addressDetail String?   @map("address_detail") // 详细地址

  roles           UserRole[]
  noticesAuthored Notice[]   @relation("NoticeAuthor")

  // 通过中间表 UserNotice 引用接收到的公告
  userNotice UserNotice[]
  Todo       Todo[]

  @@map("user")
}

// 性别枚举
enum Sex {
  MALE
  FEMALE
  OTHER
}

// 菜单表
model Menu {
  id          Int       @id @default(autoincrement())
  name        String // 菜单名称
  code        String    @unique // 权限代码
  type        String // menu: 菜单, button: 按钮 , directory: 目录
  pid         Int? // 菜单的父id
  path        String? // 路由路径
  redirect    String? // 重定向
  icon        String? // 图标
  component   String? // 组件路径
  layout      String // 布局
  keepAlive   Boolean?  @default(false) @map("keep_alive")
  method      String? //  TODO 请求方法，暂时不知道干嘛的
  description String? // 菜单描述
  show        Boolean   @default(true) // 是否展示
  enable      Boolean   @default(true) // TODO 暂时不知道干嘛的
  order       Int // 排序
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime? @updatedAt @map("updated_time")
  extraData   String?   @map("extra_data") // 额外数据

  roles RoleMenu[] // 与角色菜单表的关系

  @@map("menu")
}

// 角色表
model Role {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String    @unique
  description String?
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime  @updatedAt @map("updated_time")
  deletedTime DateTime? @map("deleted_time")
  isDeleted   Boolean   @default(false) @map("is_deleted")

  users UserRole[]
  menus RoleMenu[]

  @@map("role")
}

// 角色菜单表
model RoleMenu {
  id         Int      @id @default(autoincrement())
  roleId     Int      @map("role_id")
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menuId     Int      @map("menu_id")
  menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@unique([roleId, menuId])
  @@map("role_menu")
}

// 用户角色表
model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId     Int      @map("role_id")
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@index([roleId], map: "user_role_roleId_fkey")
  @@map("user_role")
}

// 公告类型枚举
enum NoticeType {
  NOTICE // 通知
  INFO // 消息
  ACTIVITY // 活动
}

// 公告表
model Notice {
  id          Int        @id @default(autoincrement())
  title       String
  content     String?
  type        NoticeType
  authorId    Int
  author      User       @relation("NoticeAuthor", fields: [authorId], references: [id])
  status      Int        @default(0) // 0: 未发送, 1: 已发送
  isDeleted   Boolean    @default(false) @map("is_deleted")
  createdTime DateTime   @default(now()) @map("created_time")
  updatedTime DateTime   @updatedAt @map("updated_time")
  deletedTime DateTime?  @map("deleted_time")

  // 通过中间表 UserNotice 引用接收人
  receivers UserNotice[]

  @@map("notice")
}

// 用户公告关联表
model UserNotice {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  noticeId     Int       @map("notice_id")
  notice       Notice    @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  assignedTime DateTime  @default(now()) @map("assigned_time")
  readTime     DateTime?
  isDeleted    Boolean   @default(false) @map("is_deleted")

  @@unique([userId, noticeId])
  @@map("user_notice")
}

// 待办事项
model Todo {
  id          Int       @id @default(autoincrement())
  pid         Int? // 待办事项父级id
  title       String // 待办事项标题/待办组名称
  content     String? // 待办事项内容/待办组内容
  sortOrder   Int?      @default(0) @map("sort_order") // 排序
  isDone      Boolean   @default(false) // 是否完成
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime? @updatedAt @map("updated_time")
  doneTime    DateTime? @map("done_time")
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  parent      Todo?     @relation("ParentChild", fields: [pid], references: [id])
  children    Todo[]    @relation("ParentChild")

  @@map("todo")
}
<<<<<<< Updated upstream

// 科室信息管理表
model Department {
  id          Int       @id @default(autoincrement())
  name        String // 科室名称
  description String? // 科室描述
  createdTime DateTime  @default(now()) @map("created_time")
  updatedTime DateTime? @updatedAt @map("updated_time")

  // 医生和科室的关系
  doctors Doctor[] // 与医生一对多关系

  @@map("department")
}

// 医生模型
model Doctor {
  id           Int         @id @default(autoincrement())
  userId       Int         @unique @map("user_id") // 医生对应的用户ID
  user         User        @relation(fields: [userId], references: [id])
  departmentId Int?        @map("department_id") // 医生所属科室ID
  department   Department? @relation(fields: [departmentId], references: [id])

  introduction    String? // 医生简介
  registrationFee Int?     @map("registration_fee") // 挂号费
  createdTime     DateTime @default(now()) @map("created_time")

  // 医生的排班信息
  doctorSchedule DoctorSchedule[]
  medicalRecord  MedicalRecord[]
  appointment    Appointment[]

  @@map("doctor")
}

// 患者模型
model Patient {
  id     Int  @id @default(autoincrement())
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdTime   DateTime        @default(now()) @map("created_time")
  appointment   Appointment[]
  medicalRecord MedicalRecord[]
}

enum TimePeriod {
  MORNING
  AFTERNOON
  // DAY
}

// 医生排班信息表
model DoctorSchedule {
  id          Int           @id @default(autoincrement())
  doctorId    Int           @map("doctor_id")
  doctor      Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  date        DateTime      @db.Date() // 排班日期
  timePeriod  TimePeriod?   @map("time_period") // 排班时间段  morning：上午，afternoon：下午
  createdTime DateTime      @default(now()) @map("created_time")
  updatedTime DateTime      @updatedAt @map("updated_time")
  // appointCount Int           @default(0) @map("appoint_count") // 挂号数量
  maxCount    Int           @default(100) @map("max_count") // 单条记录最多挂号数量
  appointment Appointment[]

  @@map("doctor_schedule")
}

enum AppointmentStatus {
  UNFINISHED // 未就诊
  FINISHED // 已就诊
  CANCELED // 已取消
  CALLED // 已叫号
  EXPIRED // 已过期
}

// 患者挂号表
model Appointment {
  id               Int               @id @default(autoincrement())
  patientId        Int               @map("patient_id")
  patient          Patient?          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId         Int               @map("doctor_id")
  doctor           Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointmentDate  DateTime          @map("appointment_date") // 挂号日期
  status           AppointmentStatus @default(UNFINISHED) // UNFINISHED: 未就诊, FINISHED: 已就诊 ,CANCELED: 已取消,CALLED：已叫号
  createdTime      DateTime          @default(now()) @map("created_time")
  updatedTime      DateTime          @updatedAt @map("updated_time")
  doctorScheduleId Int?              @map("doctor_schedule_id")
  doctorSchedule   DoctorSchedule?   @relation(fields: [doctorScheduleId], references: [id], onDelete: Cascade)
  medicalRecord    MedicalRecord?

  @@index([patientId, doctorScheduleId, doctorId])
  @@map("appointment")
}

// 病历表
model MedicalRecord {
  id            Int         @id @default(autoincrement())
  appointmentId Int         @unique @map("appointment_id")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patientId     Int         @map("patient_id")
  patient       Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId      Int         @map("doctor_id")
  doctor        Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  mainComplaint String      @map("main_complaint") // 主诉 
  nowSickness   String      @map("now_sickness") // 现病史
  diagnostic    String // 诊断结果
  treatment     String? // 治疗方案
  notes         String? // 备注
  createdTime   DateTime    @default(now()) @map("created_time")
  updatedTime   DateTime    @updatedAt @map("updated_time")

  @@map("medical_record")
}
=======
>>>>>>> Stashed changes
